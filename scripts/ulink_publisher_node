#!/usr/bin/env python3

from __future__ import annotations

import urdf_parser_py.urdf as urdf
from geometry_msgs.msg import TransformStamped, Pose, PointStamped, Point, WrenchStamped, Vector3
import tf2_ros
import rospy
from sensor_msgs.msg import JointState

from ros_numpy import numpify, msgify
import numpy as np
from dataclasses import dataclass, field
from typing import Dict, List, Deque, Tuple

G = 9.81


@dataclass
class Link:
    # name of link
    name: str
    # children
    children: List[Link] = field(default_factory=lambda: [])
    # parent
    mother: Link | None = None
    # position in world coordinates
    p: np.ndarray = np.zeros((3,))
    # attitute/rotation in world coordinates
    R: np.ndarray = np.eye(3)
    # linear velocity in world coordinates
    v: np.ndarray = np.zeros((3,))
    # angular velocity in world coordinates
    w: np.ndarray = np.zeros((3,))
    # joint angle
    q: float = 0.0
    # joint velocity
    dq: float = 0.0
    # joint acceleration
    ddq: float = 0.0
    # joint axis vector (relative to parent)
    a: np.ndarray = np.zeros((3,))
    # joint relative position (relative to parent)
    b: np.ndarray = np.zeros((3,))
    # mass
    m: float = 0.0
    # center of mass (link local)
    c: np.ndarray = np.zeros((3,))
    # moment of inertia (link local)
    I: np.ndarray = np.zeros((3, 3))


class ULinkPublisher:
    def __init__(self):
        self.buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.buffer)
        self.robot: urdf.Robot = urdf.Robot.from_parameter_server()

        self.frame = rospy.get_param("~frame", "odom")
        self.smoothing_enabled = rospy.get_param("~smoothing_enabled", True)

        self.link_buffer: List[Tuple[rospy.Time, Link]] = []

        self.exact_zmp_pub = rospy.Publisher("~/test_zmp", PointStamped, queue_size=1)
        self.joint_state_sub = rospy.Subscriber(
            "joint_states",
            JointState,
            callback=self.joint_states_callback,
            queue_size=1,
        )

        self.last_P = None
        self.last_L = None
        self.last_timestamp = None

    def joint_states_callback(self, msg: JointState):
        q = dict(zip(msg.name, msg.position))
        dq = dict(zip(msg.name, msg.velocity))
        ulink = self.build_ulink(q, dq)
        self.link_buffer.append((msg.header.stamp, ulink))

        if len(self.link_buffer) < 3:
            return

        (t_a, a), (t_b, b), (t_c, c) = self.link_buffer[-3:]
        dt = t_c.to_sec() - t_a.to_sec()
        b.v = (c.p - a.p) / dt

        if self.smoothing_enabled:
            def smoothing_crawler(a: Link, b: Link, c: Link):
                b.dq = np.mean((a.dq, b.dq, c.dq))

                for child_a, child_b, child_c in zip(a.children, b.children, c.children):
                    smoothing_crawler(child_a, child_b, child_c)

            smoothing_crawler(a, b, c)

        if len(self.link_buffer) > 4:
            self.link_buffer = self.link_buffer[-3:]

        self.forward_velocity(b)

        P = self.calc_P(b)
        L = self.calc_L(b)

        if self.last_P is None:
            self.last_P = P
            self.last_L = L
            self.last_timestamp = msg.header.stamp
            return

        dP = (P - self.last_P) / dt
        dL = (L - self.last_L) / dt

        m, c = self.compute_com(ulink)
        p_z = self.calc_floor_height(ulink)

        zmp = self.calc_ZMP(m, c, dP, dL, p_z)

        zmp_msg = PointStamped()
        zmp_msg.header.frame_id = self.frame
        zmp_msg.header.stamp = t_b
        zmp_msg.point.x = zmp[0]
        zmp_msg.point.y = zmp[1]
        zmp_msg.point.z = zmp[2]
        self.exact_zmp_pub.publish(zmp_msg)

        self.last_P = P
        self.last_L = L
        self.last_timestamp = msg.header.stamp


    def forward_velocity(self, root: Link):
        if root.mother is not None:
            mother = root.mother
            root.v = mother.v + np.cross(mother.w, mother.R @ root.b)
            root.w = mother.w + mother.R @ (root.a * root.dq)

        for child in root.children:
            self.forward_velocity(child)

    def build_ulink(self, q: Dict[str, float], dq: Dict[str, float]) -> Link:
        root_frame: str = self.robot.get_root()

        root_link = Link(root_frame)

        def crawler(root: Link):
            link: urdf.Link = self.robot.link_map[root.name]
            try:
                t: TransformStamped = self.buffer.lookup_transform(
                    self.frame, root.name, rospy.Time(0)
                )
            except tf2_ros.LookupException as e:
                rospy.logerr(f"failed to lookup transform: {e}")
                return

            t: np.ndarray = numpify(t.transform)
            root.R = t[:3, :3]
            root.p = t[:3, 3]

            if link.inertial is not None:
                root.I = np.array(
                    [
                        [
                            link.inertial.inertia.ixx,
                            link.inertial.inertia.ixy,
                            link.inertial.inertia.ixz,
                        ],
                        [
                            link.inertial.inertia.ixy,
                            link.inertial.inertia.iyy,
                            link.inertial.inertia.iyz,
                        ],
                        [
                            link.inertial.inertia.ixz,
                            link.inertial.inertia.iyz,
                            link.inertial.inertia.izz,
                        ],
                    ]
                )
                root.m = link.inertial.mass
                if link.inertial.origin is not None:
                    root.c = np.array(link.inertial.origin.xyz or [0, 0, 0])

            if root.name in self.robot.child_map:
                for joint_name, child_name in self.robot.child_map[root.name]:
                    child_link: urdf.Link = self.robot.link_map[child_name]
                    child = Link(child_link.name)
                    joint: urdf.Joint = self.robot.joint_map[joint_name]
                    child.a = np.array(joint.axis or [0, 0, 0])
                    if joint.origin is not None:
                        # TODO: maybe the offset is in the wrong coordinate frame?
                        child.b = np.array(joint.origin.xyz or [0, 0, 0])
                    if joint_name in dq:
                        child.q = q[joint_name]
                        child.dq = dq[joint_name]
                    child.mother = root
                    crawler(child)
                    root.children.append(child)

        crawler(root_link)

        return root_link

    def compute_com(self, root: Link):
        def crawler(root: Link):
            m = root.m
            c = (root.p + root.R @ root.c) * m

            for child in root.children:
                child_m, child_c = crawler(child)
                m += child_m
                c += child_c
            return m, c

        m, c = crawler(root)
        c /= m
        return m, c

    def forward_velocity(self, root: Link):
        if root.mother is not None:
            mother = root.mother
            root.v = mother.v + np.cross(mother.w, mother.R @ root.b)
            root.w = mother.w + mother.R @ (root.a * root.dq)

        for child in root.children:
            self.forward_velocity(child)

    def calc_P(self, root: Link) -> np.ndarray:
        c1 = root.R @ root.c
        P = root.m * (root.v + np.cross(root.w, c1))
        for child in root.children:
            P += self.calc_P(child)
        return P

    def calc_L(self, root: Link) -> np.ndarray:
        c1 = root.R @ root.c
        c = root.p + c1
        P = root.m * (root.v + np.cross(root.w, c1))
        L = np.cross(c, P) + root.R @ root.I @ root.R.T @ root.w
        for child in root.children:
            L += self.calc_P(child)
        return L

    def calc_ZMP(self, m: float, c: np.ndarray, dP: np.ndarray, dL: np.ndarray, p_z) -> np.ndarray:
        p_x = (m * G * c[0] + p_z * dP[0] - dL[1]) / (m * G + dP[2])
        p_y = (m * G * c[1] + p_z * dP[1] + dL[0]) / (m * G + dP[2])

        return np.array((p_x, p_y, p_z))

    def calc_floor_height(self, root: Link):
        def find_link(root: Link, name: str) -> Link:
            if root.name == name:
                return root

            for child in root.children:
                if (c := find_link(child, name)) is not None:
                    return c

            return None

        left_foot = find_link(root, "left_sole_link").p
        right_foot = find_link(root, "right_sole_link").p

        return min(left_foot[2], right_foot[2])


def main():
    rospy.init_node("ulink_publisher")

    node = ULinkPublisher()
    rospy.loginfo("zmp_visualizer initialized")
    rospy.spin()


if __name__ == "__main__":
    main()
